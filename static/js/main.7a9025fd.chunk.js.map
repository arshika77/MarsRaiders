{"version":3,"sources":["PathFinder/Node/Node.js","PathFinder/Heuristics.js","algorithms/dijkstra.js","PathFinder/PathFinder.js","App.js","serviceWorker.js","index.js"],"names":["Node","props","state","this","col","isFinish","isFinish2","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","manhattan","dx","dy","Math","abs","euclidean","sqrt","chebyshev","max","dijkstra","grid","startNode","finishNode","algorithm","heuristic","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","isVisited","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","includes","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","getNodesInShortestPathOrder","nodesInShortestPathOrder","currentNode","unshift","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","FINISH2_NODE_ROW","FINISH2_NODE_COL","PathFinder","mouseIsPressed","erase","clear","dist","startPos","finishPos","finishPos2","disable","seen","getGrid","setState","oldRow","oldCol","newGrid","getWallToggledGrid","nodesInShortestPathOrder2","far","i","setTimeout","animateShortestPath","document","getElementById","commonNodes","array1","array2","j","findCommonElements","dist1","element","arr","findElement","finishNode2","console","log","grid2","currentRow","visitedNodesInOrder2","grid3","visitedNodesInOrder3","nodesInShortestPathOrder3","reverse","animateDijkstra","disabled","onClick","visualizeDijkstra","startPosition","finishPosition","finishPosition2","eraseWalls","action","modal","trigger","closeOnDocumentClick","href","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","createNode","heuristicDistance","slice","nNode","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7a9025fd.chunk.js","sourcesContent":["import React, {Component} from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport './Node.css'\r\n\r\n\r\n\r\nexport default class Node extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {}\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            col,\r\n            isFinish,\r\n            isFinish2,\r\n            isStart,\r\n            isWall,\r\n            onMouseDown,\r\n            onMouseEnter,\r\n            onMouseUp,\r\n            row,\r\n          } = this.props;\r\n          const extraClassName = isFinish\r\n            ? 'node-finish'\r\n            :isFinish2\r\n            ?'node-finish2'\r\n            : isStart\r\n            ? 'node-start'\r\n            : isWall\r\n            ? 'node-wall'\r\n            : '';\r\n        return (\r\n            <div\r\n                id={`node-${row}-${col}`}\r\n                className={`node ${extraClassName}`}\r\n                onMouseDown={() => onMouseDown(row, col)}\r\n                onMouseEnter={() => onMouseEnter(row, col)}\r\n                onMouseUp={() => onMouseUp()}>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n}","\r\nexport function manhattan(dx,dy){\r\n  return Math.abs(dx)+ Math.abs(dy);\r\n}\r\nexport function euclidean(dx,dy){\r\n  return Math.sqrt(dx*dx + dy*dy)\r\n} \r\n\r\nexport function chebyshev(dx,dy){\r\n  return Math.max(Math.abs(dx),Math.abs(dy))\r\n}\r\n\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport { manhattan, euclidean, chebyshev } from '../PathFinder/Heuristics'\r\n\r\nexport function dijkstra(grid, startNode, finishNode,algorithm,heuristic) {\r\n    \r\n    const visitedNodesInOrder = []  \r\n    startNode.distance = 0\r\n    const unvisitedNodes = getAllNodes(grid)\r\n    while (! !unvisitedNodes.length){\r\n        sortNodesByDistance(unvisitedNodes)\r\n        const closestNode = unvisitedNodes.shift();\r\n        if(closestNode.isWall) continue;\r\n        if(closestNode.distance === Infinity) return visitedNodesInOrder\r\n        closestNode.isVisited = true;\r\n        visitedNodesInOrder.push(closestNode)\r\n        if(visitedNodesInOrder.includes(finishNode)){\r\n          //var visitedNodesInOrder2 = dijkstra2(grid,finishNode,finishNode2);\r\n\r\n          //console.log(visitedNodesInOrder2);\r\n          updateUnvisitedNeighbors(closestNode,finishNode, grid,algorithm,heuristic)\r\n    \r\n          return visitedNodesInOrder\r\n        } \r\n        updateUnvisitedNeighbors(closestNode,finishNode, grid,algorithm,heuristic)\r\n    }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n  }\r\n  \r\nfunction updateUnvisitedNeighbors(node,finishNode, grid,algorithm,heuristic) {\r\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n    for (const neighbor of unvisitedNeighbors) {\r\n      if(algorithm==='dijkstra'){\r\n        neighbor.distance = node.distance + 1;\r\n      }\r\n      else if(algorithm==='astar' && heuristic==='euclidean'){\r\n        neighbor.distance = node.distance + 1 + euclidean(finishNode.col-node.col,finishNode.row-node.row);\r\n      }\r\n      else if(algorithm==='astar' && heuristic==='manhattan'){\r\n        neighbor.distance = node.distance + 1 + manhattan(finishNode.col-node.col,finishNode.row-node.row);\r\n      }\r\n      else if(algorithm==='astar' && heuristic==='chebyshev'){\r\n        neighbor.distance = node.distance + 1 + chebyshev(finishNode.col-node.col,finishNode.row-node.row);\r\n      }\r\n      else if(algorithm==='bestfirst' && heuristic==='euclidean'){\r\n        neighbor.distance = node.distance + 1 + 100000*euclidean(finishNode.col-node.col,finishNode.row-node.row);\r\n      \r\n      }\r\n      else if(algorithm==='bestfirst' && heuristic==='manhattan'){\r\n        neighbor.distance = node.distance + 1 + 100000*manhattan(finishNode.col-node.col,finishNode.row-node.row);\r\n      \r\n      }\r\n      else if(algorithm==='bestfirst' && heuristic==='chebyshev'){\r\n        neighbor.distance = node.distance + 1 + 100000*chebyshev(finishNode.col-node.col,finishNode.row-node.row);\r\n      \r\n      }\r\n      neighbor.previousNode = node;\r\n    }\r\n}\r\n\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const {col, row} = node;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n  \r\nfunction getAllNodes(grid) {\r\n    const nodes = [];\r\n    for (const row of grid) {\r\n      for (const node of row) {\r\n        if(node.isVisited===false) nodes.push(node);\r\n      }\r\n    }\r\n    return nodes;\r\n}\r\n\r\n  \r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n    //const nodesInVisitedPathOrder = dijkstra2(grid,finishNode,finishNode2);\r\n    //console.log(nodesInVisitedPathOrder);\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n      nodesInShortestPathOrder.unshift(currentNode);\r\n      currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n}\r\n\r\n/*export function calcDistance(nodesInShortestPathOrder){\r\n  var sum=0,dx,dy;\r\n  for(let i=1;i<nodesInShortestPathOrder.length;i++){\r\n    dy = nodesInShortestPathOrder[i].row - nodesInShortestPathOrder[i-1].row;\r\n    dx = nodesInShortestPathOrder[i].col - nodesInShortestPathOrder[i-1].col;\r\n    sum+= manhattan(dx,dy);\r\n  }\r\n  return (sum!=0) ? sum : \"No possible path\";\r\n  \r\n  \r\n}*/","import React, { Component } from 'react'\r\nimport Popup from \"reactjs-popup\"\r\nimport Node from './Node/Node'\r\nimport {dijkstra, getNodesInShortestPathOrder, calcDistance} from '../algorithms/dijkstra'\r\n//import {findCommonElements, findElement} from './commonNodes.js'\r\nimport './PathFinder.css'\r\n//Define the initial starting point and the initial destination point of the rover\r\nlet START_NODE_ROW = 5;\r\nlet START_NODE_COL = 15;\r\nlet FINISH_NODE_ROW = 7;\r\nlet FINISH_NODE_COL = 20;\r\nlet FINISH2_NODE_ROW = 9;\r\nlet FINISH2_NODE_COL = 25;\r\n\r\n\r\nexport default class PathFinder extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            grid: [],\r\n            mouseIsPressed: false,\r\n            erase: false,\r\n            clear: false,\r\n            dist:0,\r\n            startPos: false,\r\n            finishPos: false,\r\n            finishPos2: false,\r\n            disable: false,\r\n            seen: false,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const grid = getGrid()\r\n        //gridE = grid;\r\n        this.setState({grid})\r\n    }\r\n\r\n    handleMouseDown(row, col) {\r\n        //When <button> Move starting point </button> is clicked\r\n        if(this.state.startPos){\r\n            const oldRow = START_NODE_ROW\r\n            const oldCol = START_NODE_COL\r\n            const node = this.state.grid[row][col]\r\n            node.isStart = true\r\n            this.state.grid[row][col] = node\r\n            this.state.grid[oldRow][oldCol].isStart = false\r\n            START_NODE_COL = col\r\n            START_NODE_ROW = row\r\n        }\r\n        //When <button> Move destination point </button> is clicked\r\n        else if(this.state.finishPos){\r\n            const oldRow = FINISH_NODE_ROW\r\n            const oldCol = FINISH_NODE_COL\r\n            const node = this.state.grid[row][col]\r\n            node.isFinish = true\r\n            this.state.grid[row][col] = node\r\n            this.state.grid[oldRow][oldCol].isFinish = false\r\n            FINISH_NODE_COL = col\r\n            FINISH_NODE_ROW = row\r\n        }\r\n\r\n        else if(this.state.finishPos2){\r\n            const oldRow = FINISH2_NODE_ROW\r\n            const oldCol = FINISH2_NODE_COL\r\n            const node = this.state.grid[row][col]\r\n            node.isFinish2 = true\r\n            this.state.grid[row][col] = node\r\n            this.state.grid[oldRow][oldCol].isFinish2 = false\r\n            FINISH2_NODE_COL = col\r\n            FINISH2_NODE_ROW = row\r\n        }\r\n        //When <button> Erase Walls </button> is pressed and current node is a wall\r\n        else if(this.state.erase && this.state.grid[row][col].isWall){\r\n            const newGrid = getWallToggledGrid(this.state.grid, row, col,this.state.erase)\r\n            this.setState({grid: newGrid, mouseIsPressed: true})\r\n        }\r\n        //When <button> Erase Walls </button> is pressed and current node is not a wall\r\n        else if(this.state.erase && !this.state.grid[row][col].isWall){\r\n            this.setState({mouseIsPressed:true})\r\n        }\r\n        //Drawing walls on the grid \r\n        else{\r\n            const newGrid = getWallToggledGrid(this.state.grid, row, col,this.state.erase)\r\n            this.setState({grid: newGrid, mouseIsPressed: true})\r\n        }\r\n    }\r\n\r\n    handleMouseEnter(row, col) {\r\n        //When mouse is not pressed don't do anything\r\n        if (!this.state.mouseIsPressed) return\r\n        //When <button> Erase Walls </button> is pressed\r\n        if(this.state.erase) {\r\n            const node = this.state.grid[row][col]\r\n            if(node.isWall){\r\n                const newGrid = getWallToggledGrid(this.state.grid, row, col,this.state.erase)\r\n                this.setState({grid: newGrid})\r\n            }\r\n        }\r\n        //Draw Walls\r\n        else{\r\n            const newGrid = getWallToggledGrid(this.state.grid, row, col,this.state.erase)\r\n            this.setState({grid: newGrid})\r\n        }\r\n\r\n    }\r\n\r\n    handleMouseUp() {\r\n        //On releasing the mouse button\r\n        this.setState({mouseIsPressed: false})\r\n    }\r\n\r\n    animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder,nodesInShortestPathOrder2,far) {\r\n        //Set Distance value to Visualizing\r\n        this.setState({dist:\"Visualizing...\"})\r\n        for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n            //animate visited nodes : Refer to Node.css for animation details\r\n          if (i === visitedNodesInOrder.length) {\r\n            setTimeout(() => {\r\n              this.animateShortestPath(nodesInShortestPathOrder,nodesInShortestPathOrder2,far);\r\n            }, 10 * i);\r\n            return;\r\n          }\r\n          //Do not animate start point and destination point\r\n          if(visitedNodesInOrder[i].isStart || visitedNodesInOrder[i].isFinish || visitedNodesInOrder[i].isFinish2) continue\r\n          setTimeout(() => {\r\n            const node = visitedNodesInOrder[i];\r\n            document.getElementById(`node-${node.row}-${node.col}`).className ='node node-visited';\r\n          }, 5* i);\r\n        }\r\n        \r\n    }\r\n    \r\n\r\n    animateShortestPath(nodesInShortestPathOrder,nodesInShortestPathOrder2) {\r\n        //animate shortest path : Refer to Node.css for animation details\r\n\r\n        var commonNodes = [];\r\n        commonNodes = findCommonElements(nodesInShortestPathOrder,nodesInShortestPathOrder2);\r\n\r\n\r\n        var dist1 = nodesInShortestPathOrder.length;\r\n        for(let i=0;i<nodesInShortestPathOrder2.length;i++){\r\n            nodesInShortestPathOrder.push(nodesInShortestPathOrder2[i]);\r\n        }\r\n        for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n            //Do not animate start point and destination point\r\n            if(nodesInShortestPathOrder[i].isStart || nodesInShortestPathOrder[i].isFinish || nodesInShortestPathOrder[i].isFinish2) continue \r\n            else if(i>=nodesInShortestPathOrder.length-nodesInShortestPathOrder2.length && findElement(nodesInShortestPathOrder[i],commonNodes)) {\r\n                setTimeout(() => {\r\n                    const node = nodesInShortestPathOrder[i];\r\n                    document.getElementById(`node-${node.row}-${node.col}`).className =\r\n                      'node node-shortest-path2';\r\n                  }, 50 * i);\r\n            }\r\n            else {\r\n                setTimeout(() => {\r\n                    const node = nodesInShortestPathOrder[i];\r\n                    document.getElementById(`node-${node.row}-${node.col}`).className =\r\n                    'node node-shortest-path';\r\n                }, 50 * i);\r\n            }\r\n        }\r\n        if(dist1 + nodesInShortestPathOrder2.length>2){\r\n            this.setState({dist:dist1 + nodesInShortestPathOrder2.length-2});\r\n        }\r\n        else{\r\n            this.setState({dist : \"No Possible Path\"});\r\n        }\r\n       \r\n    }\r\n    \r\n    \r\n\r\n    visualizeDijkstra(algorithm,heuristic) {\r\n        this.setState({disable: true})\r\n        //Start Visualization\r\n        const {grid} = this.state;\r\n\r\n        var startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n        var finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n        var finishNode2 = grid[FINISH2_NODE_ROW][FINISH2_NODE_COL];\r\n        \r\n        \r\n\r\n        var visitedNodesInOrder = dijkstra(grid, startNode,finishNode,algorithm,heuristic);\r\n        \r\n        var nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n        var dist1 = nodesInShortestPathOrder.length;\r\n        console.log(nodesInShortestPathOrder);\r\n        var nodesInShortestPathOrder2 = [];\r\n            var grid2 = [];\r\n            for ( let row = 0; row < 15; row++){\r\n                const currentRow = [];\r\n                for ( let col = 0; col < 50; col++){\r\n                    grid[row][col].distance = Infinity;\r\n                    grid[row][col].previousNode = null;\r\n                    grid[row][col].isVisited = false;   \r\n                    currentRow.push(grid[row][col]);\r\n                }\r\n                grid2.push(currentRow)\r\n            }\r\n        \r\n            this.setState({grid:grid2});\r\n            startNode = grid2[START_NODE_ROW][START_NODE_COL];\r\n            finishNode = grid2[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n            finishNode2 = grid2[FINISH2_NODE_ROW][FINISH2_NODE_COL];\r\n            \r\n            var visitedNodesInOrder2 = dijkstra(grid2,finishNode,finishNode2,algorithm,heuristic);\r\n            console.log(visitedNodesInOrder2);\r\n            var nodesInShortestPathOrder2 = getNodesInShortestPathOrder(finishNode2)\r\n            \r\n            //console.log(nodesInShortestPathOrder2);\r\n            //if(nodesInShortestPathOrder.length<nodesInShortestPathOrder2.length){\r\n            //     nodesInShortestPathOrder = nodesInShortestPathOrder2;\r\n            // }\r\n            var grid3 = [];\r\n            for ( let row = 0; row < 15; row++){\r\n                const currentRow = [];\r\n                for ( let col = 0; col < 50; col++){\r\n                    grid2[row][col].distance = Infinity;\r\n                    grid2[row][col].previousNode = null;\r\n                    grid2[row][col].isVisited = false;   \r\n                    currentRow.push(grid2[row][col]);\r\n                }\r\n                grid3.push(currentRow)\r\n            }\r\n        \r\n            this.setState({grid:grid3});\r\n            startNode = grid3[START_NODE_ROW][START_NODE_COL];\r\n            finishNode = grid3[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n            finishNode2 = grid3[FINISH2_NODE_ROW][FINISH2_NODE_COL];\r\n            \r\n            var visitedNodesInOrder3 = dijkstra(grid3,startNode,finishNode2,algorithm,heuristic);\r\n           \r\n            var nodesInShortestPathOrder3 = getNodesInShortestPathOrder(finishNode2);\r\n            //console.log(nodesInShortestPathOrder3[1]);\r\n\r\n            var far = finishNode2;\r\n            if(nodesInShortestPathOrder3.length < nodesInShortestPathOrder.length){\r\n               // visitedNodesInOrder = visitedNodesInOrder3;\r\n              //  nodesInShortestPathOrder = nodesInShortestPathOrder3;\r\n                nodesInShortestPathOrder2.reverse();\r\n                visitedNodesInOrder2.reverse();\r\n                //far = finishNode;\r\n                if(finishNode.previousNode!==null || finishNode2.previousNode!==null){ \r\n                       for(let i=0;i<visitedNodesInOrder2.length;i++){\r\n                            if(!visitedNodesInOrder3.includes(visitedNodesInOrder2[i]))\r\n                                visitedNodesInOrder3.push(visitedNodesInOrder2[i]);\r\n                    }\r\n                }\r\n                else{\r\n                    nodesInShortestPathOrder2=[];\r\n                    //visitedNodesInOrder2=[];\r\n                }\r\n                this.setState({disable: true})\r\n       \r\n                this.animateDijkstra(visitedNodesInOrder3, nodesInShortestPathOrder3,nodesInShortestPathOrder2);\r\n                return;\r\n            }\r\n            if(finishNode.previousNode!==null || finishNode2.previousNode!==null){\r\n                for(let i=0;i<visitedNodesInOrder2.length;i++){\r\n                    if(!visitedNodesInOrder.includes(visitedNodesInOrder2[i]))\r\n                        visitedNodesInOrder.push(visitedNodesInOrder2[i]);\r\n                }\r\n            }\r\n            else{\r\n                nodesInShortestPathOrder2=[];\r\n            }\r\n\r\n            this.setState({disable: true})\r\n       \r\n            this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder,nodesInShortestPathOrder2);\r\n    }\r\n\r\n    eraseWalls() {\r\n        //Toggle erase state on button press\r\n        this.setState({erase: !this.state.erase})\r\n    }\r\n\r\n    startPosition() {\r\n        //Toggle startPos state on button press\r\n        this.setState({startPos: !this.state.startPos})\r\n    }\r\n\r\n    finishPosition() {\r\n        //Toggle finishPos state on button press\r\n        this.setState({finishPos: !this.state.finishPos})\r\n    }\r\n\r\n    finishPosition2() { \r\n        //Toggle finishPos2 state on button press\r\n        this.setState({finishPos2: !this.state.finishPos2})\r\n    }\r\n\r\n    render() {\r\n        const {grid} = this.state\r\n        return (\r\n            <div>\r\n                <navbar className='navbar' >\r\n                    <ul>\r\n                        <li>\r\n                            <div className = \"dropdown\" disabled= {this.state.disable}>\r\n                                <button className = \"dropbtn\" disabled= {this.state.disable} >\r\n                                    Choose Algorithm to Visualize\r\n                                </button>\r\n                                <div className = \"dropdown-content\" disabled= {this.state.disable}>\r\n                                    <button className='button' disabled= {this.state.disable} onClick={() => this.visualizeDijkstra(\"dijkstra\",null)}>\r\n                                         Dijkstra\r\n                                    </button>\r\n                                    <button className='button' disabled= {this.state.disable} onClick={() => this.visualizeDijkstra(\"astar\",'euclidean')}>\r\n                                         AStar with Euclidean\r\n                                    </button>\r\n                                    <button className='button' disabled= {this.state.disable} onClick={() => this.visualizeDijkstra(\"astar\",'manhattan')}>\r\n                                         AStar with Manhattan\r\n                                    </button>\r\n                                    <button className='button' disabled= {this.state.disable} onClick={() => this.visualizeDijkstra(\"astar\",'chebyshev')}>\r\n                                         AStar with Chebyshev\r\n                                    </button>\r\n                                    <button className='button' disabled= {this.state.disable} onClick={() => this.visualizeDijkstra(\"bestfirst\",'euclidean')}>\r\n                                         Best First Search with Euclidean\r\n                                    </button>\r\n                                    <button className='button' disabled= {this.state.disable} onClick={() => this.visualizeDijkstra(\"bestfirst\",'manhattan')}>\r\n                                         Best First Search with Manhattan\r\n                                    </button>\r\n                                    <button className='button' disabled= {this.state.disable} onClick={() => this.visualizeDijkstra(\"bestfirst\",'chebyshev')}>\r\n                                         Best First Search with Chebyshev\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </li>\r\n                        <li>\r\n                            <button className = 'button' disabled= {this.state.disable} onClick={() => this.startPosition()}>\r\n                                { this.state.startPos ? \"Fix starting point\" : \"Move starting point\"}\r\n                            </button>\r\n                        </li>\r\n                        <li>\r\n                            <button className = 'button' disabled= {this.state.disable} onClick={() => this.finishPosition()}>\r\n                                { this.state.finishPos ? \"Fix destination point A\" : \"Move destination point A\"}\r\n                            </button>\r\n                        </li>\r\n                        <li>\r\n                            <button className = 'button' disabled= {this.state.disable} onClick={() => this.finishPosition2()}>\r\n                                { this.state.finishPos2 ? \"Fix destination point B\" : \"Move destination point B\"}\r\n                            </button>\r\n                        </li>\r\n                        <li>\r\n                            <button className='button' disabled= {this.state.disable} onClick = { () =>  this.eraseWalls()}>\r\n                                { this.state.erase? \"Stop Erasing\" : \"Erase Walls\"}\r\n                            </button>\r\n                        </li>\r\n                        <li>\r\n                            <form action=\"https://arshika77.github.io/MarsRaiders/\">\r\n                                <button className='button'> \r\n                                    Reset Grid \r\n                                </button>    \r\n                            </form>\r\n                        </li>\r\n                        <li>\r\n                            <Popup\r\n                                modal trigger = {\r\n                                    <button className= 'button' id= 'helpbtn'>\r\n                                    Instructions\r\n                                    </button> \r\n                                }  \r\n                                closeOnDocumentClick\r\n                                className = 'Popup'\r\n                            >\r\n                                <h1> Welcome to the MARS ROVER Navigator! </h1>\r\n                                <h3> The Mars Curiosity Rover needs to examine two sites for soil samples, labelled Destination Point A and Destination Point B. It must do so while avoiding deathly obstacles and in the shortest path possible! </h3>\r\n                                <hr></hr>\r\n                                <b> <i> (Click anywhere to close the HELP window) </i> </b> <br></br> <br></br>\r\n                                To run the MARS ROVER Navigator: <br></br> <br></br>\r\n                                <ol>\r\n                                    <li> 1. Fix the starting point of the rover </li> <br></br>\r\n                                    <li> 2. Fix the two destination points of the rover </li> <br></br>\r\n                                    <li> 3. Draw the necessary obstacles (walls) on the grid </li> <br></br>\r\n                                    <li> 4. In case you make an error, use the \"Erase Walls\" button to make corrections or press \"Reset Grid\" to start afresh </li> <br></br>\r\n                                    <li> 5. Once the simulated terrain is ready, choose the appropriate Shortest Path Algorithm and the corresponding Heuristic for the robot to implement</li> <br></br>\r\n                                    <li> 6. Voila! The MARS ROVER Navigator will visualise the shortest path of the robot and display the distance</li> <br></br>\r\n                                    <li> 7. To start another visualisation, click on \"Reset Grid\" </li> <br></br>\r\n                                </ol>\r\n                                <br></br>\r\n                                <footer>\r\n                                    To view the source code, take a look at the <a href= 'https://github.com/arshika77/MarsRaiders'> github repository </a> of the project\r\n                                </footer>\r\n                                <br></br> <br></br>\r\n                            </Popup>\r\n                        </li>\r\n                    </ul>\r\n                </navbar>\r\n                <div className = \"distance\">\r\n                    <button className='buttonBottom' >\r\n                        Distance: {this.state.dist}\r\n                    </button>\r\n                </div>\r\n                <br></br> \r\n                <div className = 'gridline'>\r\n                    {grid.map((row,rowIdx) => {\r\n                        return (\r\n                        <div key={rowIdx}> \r\n                            {row.map((node,nodeIdx) => {\r\n                                const {row, col, isFinish,isFinish2, isStart, isWall} = node\r\n                                return (\r\n                                    <Node \r\n                                        key = {nodeIdx}\r\n                                        col = {col}\r\n                                        row = {row}\r\n                                        isFinish = {isFinish}\r\n                                        isFinish2 = {isFinish2}\r\n                                        isStart = {isStart}\r\n                                        isWall = {isWall}\r\n                                        mouseIsPressed={this.state.mouseIsPressed}\r\n                                        onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                                        onMouseEnter={(row, col) =>\r\n                                          this.handleMouseEnter(row, col)\r\n                                        }\r\n                                        onMouseUp={() => this.handleMouseUp()}\r\n                                    />\r\n                                )\r\n                            })}\r\n                        </div>\r\n                    )\r\n                    })}\r\n                </div> \r\n                <footer className='footer'> \r\n                    Developed By: Arshika Lalan, Parth Agrawal, Arohi Dureja, Rupali Raniwala\r\n                </footer>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst getGrid = () => {\r\n    //Initial grid setup\r\n    const grid = [];\r\n    for ( let row = 0; row < 15; row++){\r\n        const currentRow = [];\r\n        for ( let col = 0; col < 50; col++){\r\n            currentRow.push(createNode(col,row))\r\n        }\r\n        grid.push(currentRow)\r\n    }\r\n    return grid\r\n}\r\n\r\nconst createNode = (col,row) => {\r\n    //Creating new node\r\n    return {\r\n        col,\r\n        row,\r\n        isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n        isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n        isFinish2: row === FINISH2_NODE_ROW && col=== FINISH2_NODE_COL,\r\n        distance: Infinity,\r\n        heuristicDistance: null,\r\n        isVisited: false,\r\n        isWall: false,\r\n        previousNode: null,\r\n        \r\n    }\r\n}\r\n\r\n\r\nconst getWallToggledGrid = (grid, row, col,erase) => {\r\n    //Draw wall function\r\n    const newGrid = grid.slice()\r\n    const node = newGrid[row][col]\r\n    let nNode = node\r\n    //If erase button is not pressed and a wall doesn't exist at the node already - then draw a wall\r\n    if (!node.isWall && erase === false){\r\n        const newNode = {\r\n            ...node,\r\n            isWall: !node.isWall\r\n        }\r\n        nNode = newNode\r\n    }\r\n    //If erase button is pressed : (Proper functioning rendered due to event handling functions)\r\n    else if(erase){\r\n        const newNode = {\r\n            ...node,\r\n            isWall: !node.isWall\r\n        }\r\n        nNode = newNode\r\n    }\r\n    newGrid[row][col] = nNode\r\n    return newGrid\r\n}\r\n\r\nexport function findCommonElements(array1,array2) {\r\n        \r\n    var commonNodes = []\r\n\r\n    for(let i = 0; i < array1.length; i++) { \r\n      \r\n        // Loop for array2 \r\n        for(let j = 0; j < array2.length; j++) { \r\n              \r\n            // Compare the element of each and \r\n            // every element from both of the \r\n            // arrays \r\n            if(array1[i] === array2[j]) { \r\n              \r\n                // Return if common element found \r\n                commonNodes.push(array2[j]) \r\n            } \r\n        } \r\n    }\r\n    return commonNodes\r\n}\r\n\r\nexport function findElement(element,arr) {\r\n    for(let i =0; i<arr.length; i++) {\r\n        if(element===arr[i]) return true\r\n    }\r\n    return false\r\n}","import React from 'react';\r\n//import logo from './logo.svg';\r\nimport './App.css';\r\nimport PathFinder from './PathFinder/PathFinder';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <PathFinder></PathFinder>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}